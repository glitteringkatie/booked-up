var _user$project$App$statusToString = function (status) {
	var _p0 = status;
	switch (_p0.ctor) {
		case 'Unread':
			return 'unread';
		case 'Started':
			return 'started';
		default:
			return 'read';
	}
};
var _user$project$App$initialModel = {
	tempBook: '',
	bookList: _elm_lang$core$Native_List.fromArray(
		[]),
	uid: 1,
	filter: _elm_lang$core$Maybe$Nothing
};
var _user$project$App$Model = F4(
	function (a, b, c, d) {
		return {tempBook: a, bookList: b, uid: c, filter: d};
	});
var _user$project$App$Book = F3(
	function (a, b, c) {
		return {title: a, id: b, status: c};
	});
var _user$project$App$Read = {ctor: 'Read'};
var _user$project$App$Started = {ctor: 'Started'};
var _user$project$App$Unread = {ctor: 'Unread'};
var _user$project$App$changeStatus = F2(
	function (id, book) {
		if (_elm_lang$core$Native_Utils.eq(id, book.id)) {
			var _p1 = book.status;
			switch (_p1.ctor) {
				case 'Unread':
					return _elm_lang$core$Native_Utils.update(
						book,
						{status: _user$project$App$Started});
				case 'Started':
					return _elm_lang$core$Native_Utils.update(
						book,
						{status: _user$project$App$Read});
				default:
					return _elm_lang$core$Native_Utils.update(
						book,
						{status: _user$project$App$Unread});
			}
		} else {
			return book;
		}
	});
var _user$project$App$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'TempBook':
				return _elm_lang$core$Native_Utils.update(
					model,
					{tempBook: _p2._0});
			case 'AddBook':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						bookList: A2(
							_elm_lang$core$Basics_ops['++'],
							model.bookList,
							_elm_lang$core$Native_List.fromArray(
								[
									{title: model.tempBook, id: model.uid, status: _user$project$App$Unread}
								])),
						tempBook: '',
						uid: model.uid + 1
					});
			case 'ChangeStatus':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						bookList: A2(
							_elm_lang$core$List$map,
							_user$project$App$changeStatus(_p2._0),
							model.bookList)
					});
			case 'ShowOnly':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						filter: _elm_lang$core$Maybe$Just(_p2._0)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{filter: _elm_lang$core$Maybe$Nothing});
		}
	});
var _user$project$App$ShowAll = {ctor: 'ShowAll'};
var _user$project$App$ShowOnly = function (a) {
	return {ctor: 'ShowOnly', _0: a};
};
var _user$project$App$ChangeStatus = function (a) {
	return {ctor: 'ChangeStatus', _0: a};
};
var _user$project$App$printTitle = function (book) {
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id(
				_elm_lang$core$Basics$toString(book.id)),
				_elm_lang$html$Html_Events$onClick(
				_user$project$App$ChangeStatus(book.id))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					book.title,
					A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						_user$project$App$statusToString(book.status))))
			]));
};
var _user$project$App$printBooks = F2(
	function (status, books) {
		var keyTitles = function (b) {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$toString(b.id),
				_1: _user$project$App$printTitle(b)
			};
		};
		var filteredBooks = function () {
			var _p3 = status;
			if (_p3.ctor === 'Nothing') {
				return books;
			} else {
				return A2(
					_elm_lang$core$List$filter,
					function (b) {
						return _elm_lang$core$Native_Utils.eq(b.status, _p3._0);
					},
					books);
			}
		}();
		return A2(
			_elm_lang$html$Html_Keyed$ul,
			_elm_lang$core$Native_List.fromArray(
				[]),
			A2(_elm_lang$core$List$map, keyTitles, filteredBooks));
	});
var _user$project$App$TempBook = function (a) {
	return {ctor: 'TempBook', _0: a};
};
var _user$project$App$AddBook = {ctor: 'AddBook'};
var _user$project$App$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h3,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('you\'re booked')
					])),
				A2(
				_user$project$App$printBooks,
				_elm_lang$core$Maybe$Just(_user$project$App$Started),
				model.bookList),
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onInput(_user$project$App$TempBook),
						_elm_lang$html$Html_Attributes$value(model.tempBook)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$App$AddBook)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Add another')
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(_user$project$App$ShowAll)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('View All')
							])),
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(
								_user$project$App$ShowOnly(_user$project$App$Unread))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Unread')
							])),
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(
								_user$project$App$ShowOnly(_user$project$App$Read))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Read')
							]))
					])),
				A2(_user$project$App$printBooks, model.filter, model.bookList)
			]));
};
var _user$project$App$main = {
	main: _elm_lang$html$Html_App$beginnerProgram(
		{model: _user$project$App$initialModel, update: _user$project$App$update, view: _user$project$App$view})
};
